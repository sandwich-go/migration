// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package migration

import (
	"sync/atomic"
	"unsafe"
)

// Config should use NewConfig to initialize it
type Config struct {
	FileName      string     `xconf:"file_name" usage:"migration 脚本名"`
	ScriptRoot    string     `xconf:"script_root" usage:"migration 脚本根路径"`
	MysqlDbName   string     `xconf:"mysql_db_name" usage:"migration db名"`
	MysqlUser     string     `xconf:"mysql_user" usage:"migration 数据库用户名"`
	MysqlPassword string     `xconf:"mysql_password" usage:"migration 数据库用户密码"`
	MysqlHost     string     `xconf:"mysql_host" usage:"migration 数据库地址"`
	MysqlPort     int        `xconf:"mysql_port" usage:"migration 数据库端口号"`
	RunCommand    RunCommand `xconf:"run_command"`
}

// NewConfig new Config
func NewConfig(opts ...ConfigOption) *Config {
	cc := newDefaultConfig()
	for _, opt := range opts {
		opt(cc)
	}
	if watchDogConfig != nil {
		watchDogConfig(cc)
	}
	return cc
}

// ApplyOption apply multiple new option and return the old ones
// sample:
// old := cc.ApplyOption(WithTimeout(time.Second))
// defer cc.ApplyOption(old...)
func (cc *Config) ApplyOption(opts ...ConfigOption) []ConfigOption {
	var previous []ConfigOption
	for _, opt := range opts {
		previous = append(previous, opt(cc))
	}
	return previous
}

// ConfigOption option func
type ConfigOption func(cc *Config) ConfigOption

// WithFileName migration 脚本名
func WithFileName(v string) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.FileName
		cc.FileName = v
		return WithFileName(previous)
	}
}

// WithScriptRoot migration 脚本根路径
func WithScriptRoot(v string) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.ScriptRoot
		cc.ScriptRoot = v
		return WithScriptRoot(previous)
	}
}

// WithMysqlDbName migration db名
func WithMysqlDbName(v string) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.MysqlDbName
		cc.MysqlDbName = v
		return WithMysqlDbName(previous)
	}
}

// WithMysqlUser migration 数据库用户名
func WithMysqlUser(v string) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.MysqlUser
		cc.MysqlUser = v
		return WithMysqlUser(previous)
	}
}

// WithMysqlPassword migration 数据库用户密码
func WithMysqlPassword(v string) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.MysqlPassword
		cc.MysqlPassword = v
		return WithMysqlPassword(previous)
	}
}

// WithMysqlHost migration 数据库地址
func WithMysqlHost(v string) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.MysqlHost
		cc.MysqlHost = v
		return WithMysqlHost(previous)
	}
}

// WithMysqlPort migration 数据库端口号
func WithMysqlPort(v int) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.MysqlPort
		cc.MysqlPort = v
		return WithMysqlPort(previous)
	}
}

// WithRunCommand option func for filed RunCommand
func WithRunCommand(v RunCommand) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.RunCommand
		cc.RunCommand = v
		return WithRunCommand(previous)
	}
}

// InstallConfigWatchDog the installed func will called when NewConfig  called
func InstallConfigWatchDog(dog func(cc *Config)) { watchDogConfig = dog }

// watchDogConfig global watch dog
var watchDogConfig func(cc *Config)

// newDefaultConfig new default Config
func newDefaultConfig() *Config {
	cc := &Config{}

	for _, opt := range [...]ConfigOption{
		WithFileName("migration"),
		WithScriptRoot("."),
		WithMysqlDbName("migration"),
		WithMysqlUser("root"),
		WithMysqlPassword(""),
		WithMysqlHost("127.0.0.1"),
		WithMysqlPort(3306),
		WithRunCommand(nil),
	} {
		opt(cc)
	}

	return cc
}

// AtomicSetFunc used for XConf
func (cc *Config) AtomicSetFunc() func(interface{}) { return AtomicConfigSet }

// atomicConfig global *Config holder
var atomicConfig unsafe.Pointer

// onAtomicConfigSet global call back when  AtomicConfigSet called by XConf.
// use ConfigInterface.ApplyOption to modify the updated cc
// if passed in cc not valid, then return false, cc will not set to atomicConfig
var onAtomicConfigSet func(cc ConfigInterface) bool

// InstallCallbackOnAtomicConfigSet install callback
func InstallCallbackOnAtomicConfigSet(callback func(cc ConfigInterface) bool) {
	onAtomicConfigSet = callback
}

// AtomicConfigSet atomic setter for *Config
func AtomicConfigSet(update interface{}) {
	cc := update.(*Config)
	if onAtomicConfigSet != nil && !onAtomicConfigSet(cc) {
		return
	}
	atomic.StorePointer(&atomicConfig, (unsafe.Pointer)(cc))
}

// AtomicConfig return atomic *ConfigVisitor
func AtomicConfig() ConfigVisitor {
	current := (*Config)(atomic.LoadPointer(&atomicConfig))
	if current == nil {
		defaultOne := newDefaultConfig()
		if watchDogConfig != nil {
			watchDogConfig(defaultOne)
		}
		atomic.CompareAndSwapPointer(&atomicConfig, nil, (unsafe.Pointer)(defaultOne))
		return (*Config)(atomic.LoadPointer(&atomicConfig))
	}
	return current
}

// all getter func
func (cc *Config) GetFileName() string       { return cc.FileName }
func (cc *Config) GetScriptRoot() string     { return cc.ScriptRoot }
func (cc *Config) GetMysqlDbName() string    { return cc.MysqlDbName }
func (cc *Config) GetMysqlUser() string      { return cc.MysqlUser }
func (cc *Config) GetMysqlPassword() string  { return cc.MysqlPassword }
func (cc *Config) GetMysqlHost() string      { return cc.MysqlHost }
func (cc *Config) GetMysqlPort() int         { return cc.MysqlPort }
func (cc *Config) GetRunCommand() RunCommand { return cc.RunCommand }

// ConfigVisitor visitor interface for Config
type ConfigVisitor interface {
	GetFileName() string
	GetScriptRoot() string
	GetMysqlDbName() string
	GetMysqlUser() string
	GetMysqlPassword() string
	GetMysqlHost() string
	GetMysqlPort() int
	GetRunCommand() RunCommand
}

// ConfigInterface visitor + ApplyOption interface for Config
type ConfigInterface interface {
	ConfigVisitor
	ApplyOption(...ConfigOption) []ConfigOption
}
