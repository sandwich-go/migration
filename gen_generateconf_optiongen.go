// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package migration

import (
	"sync/atomic"
	"unsafe"
)

// GenerateConf should use NewGenerateConf to initialize it
type GenerateConf struct {
	MysqlDbName           string `xconf:"mysql_db_name" usage:"migration db名"`
	MysqlUser             string `xconf:"mysql_user" usage:"migration 数据库用户名"`
	MysqlPassword         string `xconf:"mysql_password" usage:"migration 数据库用户密码"`
	MysqlHost             string `xconf:"mysql_host" usage:"migration 数据库地址"`
	MysqlPort             int    `xconf:"mysql_port" usage:"migration 数据库端口号"`
	ProtokitGoSettingPath string `xconf:"protokit_go_setting_path" usage:"protokitgo 配置文件路径"`
	ProtokitPath          string `xconf:"protokit_path" usage:"protokitgo 路径"`
}

// NewGenerateConf new GenerateConf
func NewGenerateConf(opts ...GenerateConfOption) *GenerateConf {
	cc := newDefaultGenerateConf()
	for _, opt := range opts {
		opt(cc)
	}
	if watchDogGenerateConf != nil {
		watchDogGenerateConf(cc)
	}
	return cc
}

// ApplyOption apply multiple new option and return the old ones
// sample:
// old := cc.ApplyOption(WithTimeout(time.Second))
// defer cc.ApplyOption(old...)
func (cc *GenerateConf) ApplyOption(opts ...GenerateConfOption) []GenerateConfOption {
	var previous []GenerateConfOption
	for _, opt := range opts {
		previous = append(previous, opt(cc))
	}
	return previous
}

// GenerateConfOption option func
type GenerateConfOption func(cc *GenerateConf) GenerateConfOption

// WithMysqlDbName migration db名
func WithMysqlDbName(v string) GenerateConfOption {
	return func(cc *GenerateConf) GenerateConfOption {
		previous := cc.MysqlDbName
		cc.MysqlDbName = v
		return WithMysqlDbName(previous)
	}
}

// WithMysqlUser migration 数据库用户名
func WithMysqlUser(v string) GenerateConfOption {
	return func(cc *GenerateConf) GenerateConfOption {
		previous := cc.MysqlUser
		cc.MysqlUser = v
		return WithMysqlUser(previous)
	}
}

// WithMysqlPassword migration 数据库用户密码
func WithMysqlPassword(v string) GenerateConfOption {
	return func(cc *GenerateConf) GenerateConfOption {
		previous := cc.MysqlPassword
		cc.MysqlPassword = v
		return WithMysqlPassword(previous)
	}
}

// WithMysqlHost migration 数据库地址
func WithMysqlHost(v string) GenerateConfOption {
	return func(cc *GenerateConf) GenerateConfOption {
		previous := cc.MysqlHost
		cc.MysqlHost = v
		return WithMysqlHost(previous)
	}
}

// WithMysqlPort migration 数据库端口号
func WithMysqlPort(v int) GenerateConfOption {
	return func(cc *GenerateConf) GenerateConfOption {
		previous := cc.MysqlPort
		cc.MysqlPort = v
		return WithMysqlPort(previous)
	}
}

// WithProtokitGoSettingPath protokitgo 配置文件路径
func WithProtokitGoSettingPath(v string) GenerateConfOption {
	return func(cc *GenerateConf) GenerateConfOption {
		previous := cc.ProtokitGoSettingPath
		cc.ProtokitGoSettingPath = v
		return WithProtokitGoSettingPath(previous)
	}
}

// WithProtokitPath protokitgo 路径
func WithProtokitPath(v string) GenerateConfOption {
	return func(cc *GenerateConf) GenerateConfOption {
		previous := cc.ProtokitPath
		cc.ProtokitPath = v
		return WithProtokitPath(previous)
	}
}

// InstallGenerateConfWatchDog the installed func will called when NewGenerateConf  called
func InstallGenerateConfWatchDog(dog func(cc *GenerateConf)) { watchDogGenerateConf = dog }

// watchDogGenerateConf global watch dog
var watchDogGenerateConf func(cc *GenerateConf)

// newDefaultGenerateConf new default GenerateConf
func newDefaultGenerateConf() *GenerateConf {
	cc := &GenerateConf{}

	for _, opt := range [...]GenerateConfOption{
		WithMysqlDbName("migration"),
		WithMysqlUser("root"),
		WithMysqlPassword(""),
		WithMysqlHost("127.0.0.1"),
		WithMysqlPort(3306),
		WithProtokitGoSettingPath(""),
		WithProtokitPath(""),
	} {
		opt(cc)
	}

	return cc
}

// AtomicSetFunc used for XConf
func (cc *GenerateConf) AtomicSetFunc() func(interface{}) { return AtomicGenerateConfSet }

// atomicGenerateConf global *GenerateConf holder
var atomicGenerateConf unsafe.Pointer

// onAtomicGenerateConfSet global call back when  AtomicGenerateConfSet called by XConf.
// use GenerateConfInterface.ApplyOption to modify the updated cc
// if passed in cc not valid, then return false, cc will not set to atomicGenerateConf
var onAtomicGenerateConfSet func(cc GenerateConfInterface) bool

// InstallCallbackOnAtomicGenerateConfSet install callback
func InstallCallbackOnAtomicGenerateConfSet(callback func(cc GenerateConfInterface) bool) {
	onAtomicGenerateConfSet = callback
}

// AtomicGenerateConfSet atomic setter for *GenerateConf
func AtomicGenerateConfSet(update interface{}) {
	cc := update.(*GenerateConf)
	if onAtomicGenerateConfSet != nil && !onAtomicGenerateConfSet(cc) {
		return
	}
	atomic.StorePointer(&atomicGenerateConf, (unsafe.Pointer)(cc))
}

// AtomicGenerateConf return atomic *GenerateConfVisitor
func AtomicGenerateConf() GenerateConfVisitor {
	current := (*GenerateConf)(atomic.LoadPointer(&atomicGenerateConf))
	if current == nil {
		defaultOne := newDefaultGenerateConf()
		if watchDogGenerateConf != nil {
			watchDogGenerateConf(defaultOne)
		}
		atomic.CompareAndSwapPointer(&atomicGenerateConf, nil, (unsafe.Pointer)(defaultOne))
		return (*GenerateConf)(atomic.LoadPointer(&atomicGenerateConf))
	}
	return current
}

// all getter func
func (cc *GenerateConf) GetMysqlDbName() string           { return cc.MysqlDbName }
func (cc *GenerateConf) GetMysqlUser() string             { return cc.MysqlUser }
func (cc *GenerateConf) GetMysqlPassword() string         { return cc.MysqlPassword }
func (cc *GenerateConf) GetMysqlHost() string             { return cc.MysqlHost }
func (cc *GenerateConf) GetMysqlPort() int                { return cc.MysqlPort }
func (cc *GenerateConf) GetProtokitGoSettingPath() string { return cc.ProtokitGoSettingPath }
func (cc *GenerateConf) GetProtokitPath() string          { return cc.ProtokitPath }

// GenerateConfVisitor visitor interface for GenerateConf
type GenerateConfVisitor interface {
	GetMysqlDbName() string
	GetMysqlUser() string
	GetMysqlPassword() string
	GetMysqlHost() string
	GetMysqlPort() int
	GetProtokitGoSettingPath() string
	GetProtokitPath() string
}

// GenerateConfInterface visitor + ApplyOption interface for GenerateConf
type GenerateConfInterface interface {
	GenerateConfVisitor
	ApplyOption(...GenerateConfOption) []GenerateConfOption
}
